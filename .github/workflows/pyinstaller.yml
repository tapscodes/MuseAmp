name: Build executables with PyInstaller and upload to Releases

on:
  push:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6 mutagen

      # --- Linux: Download RSgain and FFmpeg ---
      - name: Download RSgain and FFmpeg (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/complexlogic/rsgain/releases/download/v3.6/rsgain-3.6-Linux.tar.xz
          tar xf rsgain-3.6-Linux.tar.xz
          find . -type f -name rsgain -exec cp {} ./rsgain \;
          wget https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-n7.1-latest-linux64-gpl-7.1.tar.xz
          tar xf ffmpeg-n7.1-latest-linux64-gpl-7.1.tar.xz
          cp ffmpeg-n7.1-latest-linux64-gpl-7.1/bin/ffmpeg ./ffmpeg

      # --- Windows: Download RSgain and FFmpeg ---
      - name: Download RSgain and FFmpeg (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          curl -LO https://github.com/complexlogic/rsgain/releases/download/v3.6/rsgain-3.6-win64.zip
          powershell -Command "Expand-Archive -Path rsgain-3.6-win64.zip -DestinationPath rsgain-win64"
          for /R rsgain-win64 %%i in (rsgain.exe) do (
            if exist "%%i" (
              copy "%%i" rsgain.exe
            )
          )
          if not exist rsgain.exe (
            echo "Error: rsgain.exe not found!"
            exit 1
          )
          curl -LO https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-n7.1-latest-win64-gpl-7.1.zip
          powershell -Command "Expand-Archive -Path ffmpeg-n7.1-latest-win64-gpl-7.1.zip -DestinationPath ffmpeg"
          for /R ffmpeg %%i in (ffmpeg.exe) do (
            if exist "%%i" (
              copy "%%i" ffmpeg.exe
            )
          )

      # --- macOS: Download RSgain and FFmpeg ---
      - name: Download RSgain and FFmpeg (macOS)
        if: runner.os == 'macOS'
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            curl --fail -LO https://github.com/complexlogic/rsgain/releases/download/v3.6/rsgain-3.6-macOS-arm64.zip
            unzip rsgain-3.6-macOS-arm64.zip || { echo "Failed to unzip rsgain-arm64"; exit 1; }
            mv rsgain-3.6-macOS-arm64/rsgain ./rsgain || { echo "Failed to move rsgain-arm64"; exit 1; }
          else
            curl --fail -LO https://github.com/complexlogic/rsgain/releases/download/v3.6/rsgain-3.6-macOS-x86_64.zip
            unzip rsgain-3.6-macOS-x86_64.zip || { echo "Failed to unzip rsgain-x86_64"; exit 1; }
            mv rsgain-3.6-macOS-x86_64/rsgain ./rsgain || { echo "Failed to move rsgain-x86_64"; exit 1; }
          fi
          curl --fail -Lo ffmpeg.zip https://evermeet.cx/ffmpeg/getrelease/zip
          unzip ffmpeg.zip || { echo "Failed to unzip FFmpeg"; exit 1; }

      # --- Build with PyInstaller ---
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          pyinstaller --onefile --add-binary "rsgain:." --add-binary "ffmpeg:." museamp.pyw

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --windowed --add-binary "rsgain.exe;." --add-binary "ffmpeg.exe;." museamp.pyw

      # --- macOS explicit .app bundle generation ---
      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --windowed --onedir --name MuseAmp --osx-bundle-identifier com.tapscodes.museamp --add-binary "rsgain:." --add-binary "ffmpeg:." museamp.pyw
          ls dist

      # --- Linux: Build .deb, .rpm, AppImage, Flatpak ---
      - name: Install FPM
        if: runner.os == 'Linux'
        run: sudo gem install --no-document fpm

      - name: Build .deb package
        if: runner.os == 'Linux'
        run: |
          mkdir -p pkg/usr/local/bin
          cp dist/museamp pkg/usr/local/bin/
          fpm -s dir -t deb -n museamp -v 1.0.0 -C pkg .

      - name: Build .rpm package
        if: runner.os == 'Linux'
        run: |
          fpm -s dir -t rpm -n museamp -v 1.0.0 -C pkg .

      - name: Build AppImage
        if: runner.os == 'Linux'
        run: |
          pip install appimage-builder
          appimage-builder --recipe appimage-builder.yml

      - name: Build Flatpak
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          flatpak-builder --repo=repo build-dir io.github.tapscodes.museamp.json

      # --- Windows: Create NSIS installer ---
      - name: Install NSIS
        if: runner.os == 'Windows'
        run: choco install nsis

      - name: Create NSIS installer
        if: runner.os == 'Windows'
        run: |
          echo 'OutFile "dist\museamp-installer.exe"
          InstallDir "$PROGRAMFILES\Museamp"
          Page directory
          Page instfiles
          Section
            SetOutPath $INSTDIR
            File "dist\museamp.exe"
            File "dist\rsgain.exe"
            File "dist\ffmpeg.exe"
            CreateShortCut "$DESKTOP\Museamp.lnk" "$INSTDIR\museamp.exe"
          SectionEnd' > museamp-installer.nsi
          makensis museamp-installer.nsi

      # --- macOS: Create DMG installer ---
      - name: Install create-dmg
        if: runner.os == 'macOS'
        run: brew install create-dmg

      - name: Create DMG
        if: runner.os == 'macOS'
        run: |
          APP_PATH=$(find dist -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: No .app file found in the dist directory."
            exit 1
          fi
          create-dmg --volname MuseAmpInstaller --window-size 800x400 --output dist/MuseAmpInstaller.dmg "$APP_PATH"

      # --- Upload all artifacts on push ---
      - name: Upload Linux packages
        if: runner.os == 'Linux' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: museamp-linux-packages
          path: |
            dist/museamp
            *.deb
            *.rpm
            *.AppImage
            repo
            build-dir

      - name: Upload Windows artifacts
        if: runner.os == 'Windows' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: museamp-windows
          path: |
            dist/museamp.exe
            dist/museamp-installer.exe

      - name: Upload macOS artifacts
        if: runner.os == 'macOS' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: museamp-macos
          path: |
            dist/museamp
            dist/*.app
            *.dmg

      # --- Upload to GitHub Releases on release ---
      - name: Upload Linux packages to Release
        if: runner.os == 'Linux' && github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/museamp
            *.deb
            *.rpm
            *.AppImage
            repo
            build-dir
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts to Release
        if: runner.os == 'Windows' && github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/museamp.exe
            dist/museamp-installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts to Release
        if: runner.os == 'macOS' && github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/museamp
            dist/*.app
            *.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}